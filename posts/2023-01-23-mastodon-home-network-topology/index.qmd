---
title: "Mastodon, Part I: My home network topology"
subtitle: "DNS. It's always DNS. Except when it's not."
date: "2023-01-23 15:44:00"
categories: [personal, raspberry pi, k3s, mastodon, networking]
citation:
    url: https://magsol.github.io/posts/2023-01-23-mastodon-home-network-topology/
image: "networking_made_easy.png"
image-alt: "Horrific jumble of networking wires and equipment stylized like Cthulu (generated by Midjourney)."
author: "Shannon Quinn"
---
![](networking_made_easy.png){.preview-image fig-alt="Horrific jumble of networking wires and equipment stylized like Cthulu (generated by Midjourney)."}

_This article is part of a series about installing and configuring a Mastodon instance on a cluster of Raspberry Pi computers running k3s. To go back to previous articles in the series, try any of the links below:_

 1. [Introduction](../2023-01-20-mastodon-instance-k3s-rpi-introduction/index.qmd)
 2. Part I: My home network topology _(this post)_
 3. Part II: The Mastodon Helm chart
 4. Part III: Configuring and installing prerequisites
 5. Part IV: The waking nightmare that is Let's Encrypt
 6. Part V: Actually installing Mastodon
 7. Conclusions

Admittedly, this post in the series will be less "here's how to spin up your own instance" than "here's why I had so many problems that are specific just to me", so if you have a solid handle on your own home network topology and/or are a DNS savant, feel free to skip this post.

For the rest of us mere networking mortals, let me walk you through a network hiccup that has been stymieing my attempt at an honest-to-goodness homelab kubernetes cluster for the better part of the last couple years.

### Thanks a lot, Bezos

During the height of the pandemic in summer 2020--and somewhat in preparation for the birth of our daughter--I performed some long-overdue home network upgrades. This included 1) switching over to fiber internet, and 2) upgrading to a mesh network, rather than the janky router-plus-extender setup that honestly never really worked all that well. The router itself was already 5+ years old (purchased when we first moved into the house), so it needed an upgrade anyway.

At the recommendation of some friends, I went with [eero](https://eero.com/). Honestly, I'd still recommend it: it's been rock-solid, with no problems between my Apple devices (MBP, iPad Pro, and iPhone), my wife's Android+Windows devices (Surface, Pixels), and our myriad [internet-of-sh!t devices](https://twitter.com/internetofshit) strewn throughout the house. Literally zero problems, which I honestly can't even say for our old router.

...with, I suppose, one exception: putting the eeros into bridge mode.

### Bridge mode is not what you think it is

As far as I'm aware, across all devices--from ISP modems to VirtualBox to Docker to home routers--the term "bridge mode" has a common intuition: it means the device that has been placed into bridge mode relinquishes any intelligent packet organizing methods it may have been using before and simply acts as a simple "bridge" between whatever entities it is connected to. As such, it doesn't really care what those entities are, it just passes traffic between them.

Not so with eeros.

To illustrate, here is what my home network looked like _before_ starting any of this craziness.

![Why yes, I did configure MoCA for my home mesh, thanks for asking.](original.jpg){fig-alt="My home network setup pre-Mastodon, where the main eero connects directly to the AT&T modem and acts as the chief router and DHCP server of the household."}

This setup worked, except... see that Raspberry Pi cluster in the bottom left? That's where I installed k3s for tinkering, but "tinkering" is pretty much all anything amounted to, because eeros have an odd limitation when it comes to port forwarding: **they don't allow IP-based service forwarding**, or at least, service forwarding that is based **solely** on IP addresses; they also require MAC addresses. When dealing with ephemeral services created by kubernetes clusters on floating IP ranges, there aren't associated MAC addresses with these services, which makes it impossible to use software-based load balancers like [metallb](https://metallb.universe.tf/), and therefore impossible to deploy multiple services that use similar configurations--like, say, multiple websites: Mastodon and something else.

So the first thing I had to do, were I to run my own instance, was to figure out a network configuration that would allow me to do IP-based port forwarding. I recalled that my old router had this ability, so I figured: let's just pull that out of retirement and use it purely for port forwarding!

Following was my first attempt. Note the major changes: the router has taken the place of the "main" eero as connecting directly to the ISP modem, and what was formerly the "main" eero is now just a wireless access point, connected to nothing _except_ the router.

![My first attempt at putting the eeros in bridge mode and un-retiring my old router.](first_bridge_attempt.jpg){fig-alt="My initial attempt at a home network setup that re-integrated my old router which could perform IP-based port forwarding. It took the place of the main eero by connecting to the ISP modem, and what had been the main eero was now just another access point, connected only to the now-unretired router."}

Suffice to say, this didn't work. I mean, it _kind of_ worked: the Raspberry Pi cluster was getting the right traffic forwarded to it. But seemingly random devices on the network would, suddenly and for no reason I could discern, disconnect and refuse to reconnect unless the _entire network_ was rebooted.

Not exactly a tenable situation. So I reverted to the previous configuration where the eeros were in charge while I tried to figure out what was going on.

Fast forward about 8 months. I finally, _finally_ found [this post on Reddit](https://www.reddit.com/r/eero/comments/nxlspa/psa_bridge_mode_is_not_what_you_think_it_is/) (because why would eero have it in their technical support documents?) from a couple years ago, with this critical element:

![](eero_bridge_network.jpeg){fig-alt="Screenshot of one post from the previous Reddit link, summarizing the precise network topology and positioning of the main eero in the sequence that eero expects in order to function correctly in bridge mode."}

Apparently, even in bridge mode, there has to be at least one eero that can "see" the entirety of your home network (i.e., all incoming traffic should pass through it).

This... made absolutely no sense to me, as it directly contravened my understanding of "bridge mode". But I went with it, and retooled my network to follow this new bit of information.

Here was my next attempt. Like my previous attempt, the router is connected directly to the ISP model. However, _unlike_ my previous attempt, what was the "main" eero in the original configuration--while still connected to the router--now sits between the router and _the entire rest of the home network_, rather than just the router and... whatever devices deign to connect wirelessly to it.

![My final attempt at a network reconfiguration, this time putting one eero ahead of the rest of the home network.](newest_topology.jpg){fig-alt="My final attempt at a home network setup that re-integrated my old router which could perform IP-based port forwarding. This took into account that at least one eero still needed to be able to see all the incoming traffic, so I made sure there was one situated in between the now-unretired router and the rest of the home network. This seemed to resolve the issues and has been my stable configuration for several months now."}

This configuration, while still strange to me, officially works--or at least, it's worked for the past few months with no issues.

### Load balancers: green

With the issue of the k3s Raspberry Pi cluster being able to receive incoming traffic from the wider internet effectively resolved, I could now undertake the process of installing a Mastodon instance on the cluster with gusto.

In the next post, we'll look at the [Mastodon Helm chart](https://github.com/mastodon/chart) in all its glory. Stay tuned!